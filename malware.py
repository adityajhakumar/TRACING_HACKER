import psutil
import os
import hashlib
import requests
import time  # Add this line to import the time module

# Function to download known malware signatures from an external database
def download_known_signatures(url):
    try:
        response = requests.get(url)
        if response.status_code == 200:
            return response.text.splitlines()
        else:
            return []
    except Exception as e:
        print(f"Error downloading known signatures: {e}")
        return []

# Function to get the signature of a process
def get_process_signature(proc):
    try:
        process_exe = proc.exe()
        with open(process_exe, 'rb') as f:
            content = f.read()
            return hashlib.md5(content).hexdigest()
    except (psutil.AccessDenied, psutil.NoSuchProcess, FileNotFoundError):
        return None

# Function to detect malware processes using signature-based detection
def detect_malware():
    malware_processes = []
    known_malware_signatures = set(download_known_signatures('https://example.com/known_signatures.txt'))
    
    for proc in psutil.process_iter(['pid', 'name', 'exe', 'cmdline']):
        try:
            process_name = proc.info['name']
            process_cmdline = proc.info['cmdline']
            process_signature = get_process_signature(proc)
            
            if process_name in known_malware_signatures:
                malware_processes.append({'pid': proc.info['pid'], 'name': process_name, 'cmdline': process_cmdline})
            elif process_signature in known_malware_signatures:
                malware_processes.append({'pid': proc.info['pid'], 'name': process_name, 'cmdline': process_cmdline})
        except (psutil.NoSuchProcess, psutil.AccessDenied):
            pass
    
    return malware_processes

# Function to continuously monitor for malware processes in real-time
def monitor_malware_realtime():
    while True:
        malware_processes = detect_malware()
        if malware_processes:
            print("Potential malware processes found:")
            for malware_process in malware_processes:
                print(f"PID: {malware_process['pid']}, Name: {malware_process['name']}, Command Line: {' '.join(malware_process['cmdline'])}")
        else:
            print("No potential malware processes found.")
        
        # Add a delay before rechecking for processes
        time.sleep(30)  # Adjust the delay time as needed

# Main function
def main():
    # Start real-time monitoring for malware processes
    monitor_malware_realtime()

if __name__ == "__main__":
    main()
